<?php

 /**
 * Implemetation of hook_menu, retrieve conatacts from civicrm for
 * autocomplete widget.
 */
function civicrm_reference_fields_menu() 
{
    $items = array();
    $items['civicrm_reference_fields/autocomplete/%'] = 
        array(
              'title'            => t('Contacts'),
              'page callback'    => 'civicrm_reference_fields_autocomplete_value',
              'type'             => MENU_CALLBACK,
              'access arguments' => array('access content'),
              );
    
    return $items;
}

/**
 * Implemetation of hook_field_info
 */
function civicrm_reference_fields_field_info( ) {
    return array(
                 'civicrm_reference_fields_contribution' => 
                 array(
                       'label'             => t('CiviCRM Contribution Pages'),
                       'description'       => t('Reference a CiviCRM Contribution Pages.'),
                       'default_widget'    => 'options_select',
                       'default_formatter' => 'civicrm_reference_fields_link',
                       ),
                 'civicrm_reference_fields_event' => 
                 array(
                       'label'             => t('CiviCRM Event Info Pages'),
                       'description'       => t('Reference a CiviCRM Event Info Pages.'),
                       'default_widget'    => 'options_select',
                       'default_formatter' => 'civicrm_reference_fields_link',
                       ),
                 'civicrm_reference_fields_pcp' => 
                 array(
                       'label'             => t('CiviCRM Personal Campaign Pages'),
                       'description'       => t('Reference a CiviCRM Personal Campaign Pages.'),
                       'default_widget'    => 'options_select',
                       'default_formatter' => 'civicrm_reference_fields_link',
                       ),
                 );
}

/**
 * Implemetation of hook_field_widget_info
 */
function civicrm_reference_fields_field_widget_info() {
    return array(
                 'civicrm_reference_fields_autocomplete_contribution' => 
                 array(
                       'label' => t('Autocomplete text field'),
                       'field types' => array('civicrm_reference_fields_contribution'),
                       'settings' => array(
                                           'size' => 100,
                                           'autocomplete_path' => 'civicrm_reference_fields/autocomplete/contribution',
                                           ),
                       ),
                 'civicrm_reference_fields_autocomplete_event' => 
                 array(
                       'label' => t('Autocomplete text field'),
                       'field types' => array('civicrm_reference_fields_event'),
                       'settings' => array(
                                           'size' => 100,
                                           'autocomplete_path' => 'civicrm_reference_fields/autocomplete/event',
                                           ),
                       ),
                 'civicrm_reference_fields_autocomplete_pcp' => 
                 array(
                       'label' => t('Autocomplete text field'),
                       'field types' => array('civicrm_reference_fields_pcp'),
                       'settings' => array(
                                           'size' => 100,
                                           'autocomplete_path' => 'civicrm_reference_fields/autocomplete/pcp',
                                           ),
                       ),
                 );
                 
}

/**
 * Implemetation of hook_field_widget_info_alter
 */
function civicrm_reference_fields_field_widget_info_alter(&$info) {
    $info['options_select']['field types'][] = 'civicrm_reference_fields_contribution';
    $info['options_select']['field types'][] = 'civicrm_reference_fields_event';
    $info['options_select']['field types'][] = 'civicrm_reference_fields_pcp';

    $info['options_buttons']['field types'][] = 'civicrm_reference_fields_contribution';
    $info['options_buttons']['field types'][] = 'civicrm_reference_fields_event';
    $info['options_buttons']['field types'][] = 'civicrm_reference_fields_pcp';
}

/**
 * Implements hook_options_list().
 */
function civicrm_reference_fields_options_list($field) {
  $function = !empty($field['settings']['options_list_callback']) ? $field['settings']['options_list_callback'] : 'civicrm_reference_fields_allowed_values';
  return $function($field);
}

/**
 * Implements hook_field_is_empty().
 */
function civicrm_reference_fields_field_is_empty($item, $field) {  
    return empty($item['civicrm_reference_id'])? true : false;
}

/**
 * Implements hook_field_formatter_info().
 */
function civicrm_reference_fields_field_formatter_info() 
{
    return array(
                 'civicrm_reference_fields_link' => array(
                                                     'label'           => t('Title (link)'),
                                                     'field types'     => array('civicrm_reference_fields_contribution', 'civicrm_reference_fields_event', 'civicrm_reference_fields_pcp')
                                                     ),
                 'civicrm_reference_fields_plain' => array(
                                                      'label'           => t('Title (plain)'),
                                                      'field types'     => array('civicrm_reference_fields_contribution', 'civicrm_reference_fields_event', 'civicrm_reference_fields_pcp')
                                                      )
                 
                 );
}

/**
 * Implements hook_field_formatter_view()
 */
function civicrm_reference_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if (!($values = _civicrm_reference_fields_get_details($items, $field))) return $element;
  
  $field_type = _civicrm_reference_fields_get_type($field);
  $field_id   = 'civicrm_reference_id';
  
  switch ($display['type']) {
    case 'civicrm_reference_fields_link':
        $path = '';
        if ($field_type == 'contribution') {
            $path = 'civicrm/contribute/transact';
        } 
        elseif ($field_type == 'event') {
            $path = 'civicrm/event/info';
        } 
        elseif ($field_type == 'pcp') {
            $path = "civicrm/contribute/pcp/info";
        }

        foreach ($items as $delta => $item) {
            if (!empty($item[$field_id]) &&  isset($values[$item[$field_id]])) {
                $item_details = $values[$item[$field_id]];
                $element[$delta] = 
                    array(
                          '#markup' => l($item_details['title'], 
                                         $path, 
                                         array('query' => 
                                               array('reset' => 1,
                                                     'id'    => $item_details['id'])))
                          );
          }
      }
      break;

  case 'civicrm_reference_fields_plain':
      foreach ($items as $delta => $item) {
          if (!empty($item[$field_id]) &&  isset($values[$item[$field_id]])) {
              $element[$delta] = 
              array(
                    '#markup' => $values[$item[$field_id]]['title']
                    );
          }
      }
      break;
  }

  return $element;
}

/**
 * Returns the set of valid civicrm contacts
 *
 * @param $field
 *   The field definition.
 * @return
 *   The array of valid contacts.
 */
function civicrm_reference_fields_allowed_values($field) {
    
    $function = '_civicrm_reference_fields_get_values_' . _civicrm_reference_fields_get_type($field);
    $references = $function( );
    $options = array();
    foreach ($references as $key => $value) {
        $options[$key] = html_entity_decode(strip_tags($value['title']));
    }
    return $options;
}


function _civicrm_reference_fields_get_values_contribution($ids=array( ), $title='', $limit=25) {
    $references = array();
    if (!civicrm_initialize()) return $references;

    $params = array( );
    $query = "SELECT id, title FROM civicrm_contribution_page WHERE is_active = 1 ";
    if (!empty($ids)) {
        $query .= "AND id IN (" . implode(',', $ids) . ')'; 
    }

    if ($title) {
        $query .= "AND title LIKE %1";
        $params[1] = array($title, 'String');
    }
    
    $query .= " ORDER BY start_date, title";    
    if ( $limit ) {
        $query .= " LIMIT 0, $limit"; 
    }

    $pages = CRM_Core_DAO::executeQuery($query, $params);
    while( $pages->fetch() ) {
        $references[$pages->id] = array('id'       => $pages->id,
                                        'title'    => $pages->title,
                                        'rendered' => $pages->title . ' [id:' . $pages->id . ']' );
    }
    
    return $references;
}

function _civicrm_reference_fields_get_values_event($ids=array( ), $title='', $limit=25) {
    $references = array();
    if (!civicrm_initialize()) return $references;
    
    $params = array( );
    $query = "SELECT id, title FROM civicrm_event WHERE ( civicrm_event.is_template IS NULL OR civicrm_event.is_template = 0 ) AND is_active = 1 ";
    
    if (!empty($ids)) {
        $query .= "AND id IN (" . implode(',', $ids) . ')'; 
    }

    if ($title) {
        $query .= "AND title LIKE %1";
        $params[1] = array($title, 'String');
    }

    if ($limit) {
        $query .= " LIMIT 0, $limit"; 
    }

    $pages = CRM_Core_DAO::executeQuery($query, $params);
    while ($pages->fetch()) {
        $references[$pages->id] = array('id'       => $pages->id,
                                        'title'    => $pages->title,
                                        'rendered' => $pages->title . ' [id:' . $pages->id . ']' );
    }
    
    return $references;
}

function _civicrm_reference_fields_get_values_pcp($ids=array( ), $title='', $limit=25) {
    $references = array();
    if (!civicrm_initialize()) return $references;

    $params = array( );
    $query = "SELECT id, title FROM civicrm_pcp WHERE is_active = 1 ";
    if (!empty($ids)) {
        $query .= "AND id IN (" . implode(',', $ids) . ')'; 
    }

    if ($title) {
        $query .= "AND title LIKE %1";
        $params[1] = array($title, 'String');
    }
    
    $query .= " ORDER BY title";    
    if ( $limit ) {
        $query .= " LIMIT 0, $limit"; 
    }

    $pages = CRM_Core_DAO::executeQuery($query, $params);
    while( $pages->fetch() ) {
        $references[$pages->id] = array('id'       => $pages->id,
                                        'title'    => $pages->title,
                                        'rendered' => $pages->title . ' [id:' . $pages->id . ']' );
    }
    
    return $references;
}

function _civicrm_reference_fields_get_type($field) {
    return substr($field['type'], 25);
}

/**
 * Implements hook_field_widget_form().
 */
function civicrm_reference_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    static $default_values;
    
    $field_name = $field['field_name'];
    if ( is_null($default_values) || !isset($default_values[$field_name]) ) { 
        $default_values[$field_name] = _civicrm_reference_fields_get_details($items, $field);        
    }    
    
    $default_value = NULL;
    if (!empty($items[$delta]['civicrm_reference_id']) && ($ref_id = $items[$delta]['civicrm_reference_id']) && isset($default_values[$field_name][$ref_id])) {
        $default_value = $default_values[$field_name][$ref_id]['rendered'];
    }
 
    $element += array(
                      '#type'              => 'textfield',    
                      '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
                      '#size'              => $instance['widget']['settings']['size'],
                      '#maxlength'         => 1024,
                      '#default_value'     => $default_value,
                      '#element_validate'  => array('civicrm_reference_fields_autocomplete_validate'),
                      );
    
    return array('civicrm_reference_id' => $element);
}

/**
 * Implements hook_field_widget_error().
 */
function civicrm_reference_fields_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_settings_form().
 */
// function civicrm_reference_fields_field_settings_form($field, $instance, $has_data) {
    
//     $settings = $field['settings'];
//     $form = array( );
    
//     if ( $field['type'] == 'civicrm_reference_fields_event') {
//         $label = 'CiviCRM Event Pages';
//     } else {
//         $label = 'CiviCRM Contribution Pages';
//     }

//     $form['allowed_values'] = array(
//                                     '#type'          => 'checkbox',
//                                     '#title'         => t('@1 Created by current logged in user', array( '@1' => $label ) ),
//                                     '#default_value' => isset($settings['allowed_values'])? $settings['allowed_values'] : NULL,
//                                     '#weight'        => 1,
//                                     );
//     return $form;
// }

/**
 * Form element validate handler for civicrm contact autocomplete element.
 */
function civicrm_reference_fields_autocomplete_validate($element, &$form_state) {
    $field = field_info_field($element['#field_name']);
    $type  = _civicrm_reference_fields_get_type($field);
    $value = $element['#value'];

    $id = null;
    if (!empty($value)) {
        preg_match('/^(?:\s*|(.*) )?\[\s*id\s*:\s*(\d+)\s*\]$/', $value, $matches);
        if (!empty($matches)) {
            // Explicit [cid:n].
            $id = $matches[2];
        }
        else {
            // No explicit cid.
            $ids = _civicrm_reference_fields_find_references($type, $field, $value, TRUE);
            if (empty($ids)) {
                form_error($element, t('%name: found no valid post with that title.', array('%name' => $element['#title'] ) ) );
            }
            else {
                $id = array_shift(array_keys($ids));
            }
        }
    }
    form_set_value($element, $id, $form_state);
}

/*
 * Function to provide values for autocomplete civicrm contact
 * element, depend upon entered string.
 */
function civicrm_reference_fields_autocomplete_value( $field_name, $string = '' ) {
    if ( ! civicrm_initialize( ) ) {
        return;
    }
    
     $field = field_info_field($field_name);;
     $matches = array();

     $references = _civicrm_reference_fields_find_references(arg(2), $field, $string);
     foreach ($references as $id => $row) {
         // add a class wrapper for a few required CSS overrides.
         $matches[$row['rendered']] = '<div class="civicrm_reference-fields-autocomplete">'. $row['title'] . '</div>';
     }
     drupal_json_output( $matches );
}

function _civicrm_reference_fields_get_details($items, $field) {
    if (empty($items)) return NULL;
    
    $field_type = _civicrm_reference_fields_get_type($field);
    $field_id = 'civicrm_reference_id'; 
    $ids = array( );
    foreach ($items as $delta => $item) {
          if (isset($item[$field_id]) && is_numeric($item[$field_id]) ) {
              $ids[] = $item[$field_id];
          }
    }
    if (empty($ids)) return NULL;
    
    $function = '_civicrm_reference_fields_get_values_' . $field_type;
    $values = $function($ids, NULL);
    
    if (empty($values)) return NULL;
    
    return $values;
}

function _civicrm_reference_fields_find_references($type, $field, $string, $match_exact=FALSE, $limit=10) {
    $references = array();
    $ref_types  = _civicrm_reference_fields_available_types();
    if ( !($table = array_search($type, array_keys($ref_types)))) {
        return $references;
    }
    
    $string = trim($string);
    if (!$match_exact) {
        $string = "%{$string}%";
    }

    $function = '_civicrm_reference_fields_get_values_' . $type;
    return $function(array( ), trim($string), $limit);
}


function _civicrm_reference_fields_available_types( ) {
    return array( 'event' => t('CiviCRM Event Page(s)'), 
                  'contribution' => t('CiviCRM Contribution Page(s)'),
                  'pcp' => t('CiviCRM Personal Campaign Page(s)') );
    
}